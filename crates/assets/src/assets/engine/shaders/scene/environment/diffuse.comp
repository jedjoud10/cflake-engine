#version 460 core

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (constant_id = 0) const uint cubemap_resolution = 1;

layout(set = 0, binding = 0) uniform textureCube enviro;
layout(set = 0, binding = 1) uniform sampler enviro_sampler;
layout(set = 0, binding = 2, rgba32f) writeonly uniform image2DArray diffuse;

layout(set = 0, binding = 3) uniform Matrices {
    mat4 data[6];
} matrices;

void main() {
    // Convert coordinates to -1 - 1 coordinates
    vec2 coords = vec2(gl_GlobalInvocationID.xy);
    vec3 ndc = vec3(coords.x / cubemap_resolution, coords.y / cubemap_resolution, 1);
    ndc.xy = ndc.xy * 2 - 1;

    // Convert the NDC coordinate to a world space normal 
    mat4 matrix = matrices.data[gl_GlobalInvocationID.z];
    vec3 normal = normalize((matrix * vec4(ndc, 0)).xyz);

    // Create the resulting variables
    vec3 irradiance = vec3(0.0);
    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, normal));
    up = normalize(cross(normal, right));

    // Used for convolution
    float sample_delta = 0.255;
    float samples = 0.0;
    const float PI = 3.14159265359;

    // Loop through a sphere using specific delta steps
    for(float phi = 0.0; phi < 2.0 * PI; phi += sample_delta) {
        for(float theta = 0.0; theta < 0.5 * PI; theta += sample_delta) {
            // spherical to cartesian (in tangent space) (I don't know why or how this works ok)
            vec3 sampled_tangent = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            
            // tangent space to world (ok I see you my boi)
            vec3 sampled_dir = sampled_tangent.x * right + sampled_tangent.y * up + sampled_tangent.z * normal; 

            irradiance += texture(samplerCube(enviro, enviro_sampler), sampled_dir).rgb * cos(theta) * sin(theta);
            samples += 1.0;
        }
    }

    // Return the irradiance diffuse lighting
    vec3 color = PI * irradiance * (1.0 / samples);

    imageStore(diffuse, ivec3(gl_GlobalInvocationID.xyz), vec4(color, 1));
}
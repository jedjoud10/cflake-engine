#version 460 core
layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

// TODO: Please implement spec constants instead of this shit
#include "size"
#include "output_triangles_count"
#include "output_vertices_count"

// Atomic counters
layout(std430, set = 0, binding = 2) readonly buffer OldCounters {
    uint vertices;
    uint triangles;
} old_counters;

// Atomic counters
layout(std430, set = 0, binding = 3) writeonly buffer NewCounters {
    uint vertices;
    uint triangles;
} new_counters;

// Atomic counters
layout(std430, set = 0, binding = 4) readonly buffer CurrentCounters {
    uint vertices;
    uint triangles;
} current_counters;

// Indirect drawing buffer
layout(std430, set = 1, binding = 0) writeonly buffer Indirect {
    uint vertex_count;
    uint instance_count;
    uint base_index;
    int vertex_offset;
    uint base_instance;
} indirect;

void main() {
    indirect.base_index = old_counters.triangles;
    /*
    uint added_vertices = current_counters.vertices;
    uint added_triangles = current_counters.triangles;
    uint vertex_offset = old_counters.vertices;
    uint triangle_offset = old_counters.triangles;

    if (gl_GlobalInvocationID.x < added_vertices) {
        output_vertices.data[gl_GlobalInvocationID.x + vertex_offset] = temporary_vertices.data[gl_GlobalInvocationID.x];
    }

    if (gl_GlobalInvocationID.x < added_triangles) {
        output_triangles.data[gl_GlobalInvocationID.x + triangle_offset] = temporary_triangles.data[gl_GlobalInvocationID.x];
    }
    
    new_counters.vertices = vertex_offset + added_vertices;
    new_counters.triangles = triangle_offset + added_triangles;
    */
    //indirect.vertex_count = 6000;
}